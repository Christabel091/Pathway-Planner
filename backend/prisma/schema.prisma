generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique(map: "email") @db.VarChar(150)
  UserName      String        @db.VarChar(150)
  password_hash String  @db.VarChar(72)
   profileCompleted Boolean  @default(false)
  role          Role
  created_at    DateTime?     @default(now()) @db.DateTime(0)
  updated_at    DateTime?     @default(now()) @updatedAt @db.DateTime(0)

  auditLogs     AuditLog[]    @relation("AuditActor")
  Caretaker     Caretaker?
  Clinician     Clinician?
  goalVersions  GoalVersion[] @relation("GoalVersionProposedBy")
  Patient       Patient?

  @@map("users")
}

model Patient {
  id                     Int                   @id @default(autoincrement())
  user_id                Int                   @unique(map: "uq_patients_user")
  clinician_id           Int                   @map("clinician_id")

  full_name              String                @db.VarChar(150)
  dob                    DateTime              @db.Date
  gender                 Gender?               @default(prefer_not_say)
  phone_number           String?               @db.VarChar(20)
  address                String?               @db.VarChar(255)
  relative_contact_name  String?               @db.VarChar(150)
  relative_contact_email String?               @db.VarChar(150)
  relative_contact_phone String?               @db.VarChar(20)
  blood_type             BloodType?
  allergies              String?               @db.Text
  chronic_conditions     String?               @db.Text
  current_medications    String?               @db.Text
  height_cm              Decimal?              @db.Decimal(5, 2)
  weight_kg              Decimal?              @db.Decimal(5, 2)
  created_at             DateTime?             @default(now()) @db.DateTime(0)
  updated_at             DateTime?             @default(now()) @updatedAt @db.DateTime(0)
  aiSuggestions          AiSuggestion[]
  goals                  Goal[]
  journals               JournalEntry[]
  labs                   LabResult[]
  meals                  Meal[]
  medicines              Medicine[]
  caretakerLinks         PatientCaretaker[]
  dailyMetrics           PatientDailyMetrics[]
  symptoms               SymptomLog[]
  user                   User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_patients_user")
  // NEW relation to Clinician (Restrict delete to protect integrity)
  clinician              Clinician             @relation(fields: [clinician_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "fk_patients_clinician")

  @@index([clinician_id], map: "idx_patients_clinician")
  @@map("patients")
}

model Clinician {
  id             Int                @id @default(autoincrement())
  user_id        Int                @unique(map: "uq_clinicians_user")
  full_name      String             @db.VarChar(150)
  specialty      String?            @db.VarChar(120)
  license_number String?            @db.VarChar(100)
  clinic_name    String?            @db.VarChar(150)
  contact_email  String?            @db.VarChar(150)
  contact_phone  String?            @db.VarChar(20)
  office_address String?            @db.VarChar(255)
  inviteCode       String  @unique
  inviteUpdatedAt  DateTime @default(now())
  created_at     DateTime?          @default(now()) @db.DateTime(0)
  updated_at     DateTime?          @default(now()) @updatedAt @db.DateTime(0)
  patients       Patient[]

  user           User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_clinicians_user")

  @@map("clinicians")
}

model Caretaker {
  id           Int                @id @default(autoincrement())
  user_id      Int                @unique(map: "uq_caretakers_user")
  full_name    String             @db.VarChar(150)
  relationship String?            @db.VarChar(80)
  phone_number String?            @db.VarChar(20)
  created_at   DateTime?          @default(now()) @db.DateTime(0)
  updated_at   DateTime?          @default(now()) @updatedAt @db.DateTime(0)
  user         User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_caretakers_user")
  patientLinks PatientCaretaker[]

  @@map("caretakers")
}

model PatientCaretaker {
  patient_id   Int
  caretaker_id Int
  role_note    String?   @db.VarChar(120)
  permissions  String?   // keep as String? since your DB had SET/var; JSON is also fine if you prefer
  created_at   DateTime? @default(now()) @db.DateTime(0)

  caretaker    Caretaker @relation(fields: [caretaker_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pc_caretaker")
  patient      Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pc_patient")

  @@id([patient_id, caretaker_id])
  @@index([caretaker_id], map: "fk_pc_caretaker")
  @@map("patient_caretakers")
}

model Goal {
  id            Int            @id @default(autoincrement())
  patient_id    Int
  title         String         @db.VarChar(200)
  description   String?        @db.Text
  status        GoalStatus?    @default(active)
  due_date      DateTime?      @db.Date
  completed     Boolean?       @default(false)
  created_at    DateTime?      @default(now()) @db.DateTime(0)
  updated_at    DateTime?      @default(now()) @updatedAt @db.DateTime(0)
  aiSuggestions AiSuggestion[]
  progress      GoalProgress[]
  versions      GoalVersion[]
  patient       Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_goals_patient")
  journals      JournalEntry[]

  @@index([patient_id], map: "idx_goals_patient")
  @@map("goals")
}

model GoalVersion {
  id              Int       @id @default(autoincrement())
  goal_id         Int
  proposed_by_id  Int?
  version_number  Int
  target_per_week Int?
  created_at      DateTime? @default(now()) @db.DateTime(0)
  goal            Goal      @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gv_goal")
  proposedBy      User?     @relation("GoalVersionProposedBy", fields: [proposed_by_id], references: [id], onUpdate: NoAction, map: "fk_gv_user")

  @@unique([goal_id, version_number], map: "uq_gv_goal_version")
  @@index([proposed_by_id], map: "fk_gv_user")
  @@map("goal_version")
}

model JournalEntry {
  id         Int         @id @default(autoincrement())
  patient_id Int
  goal_id    Int?
  title      String?     @db.VarChar(200)
  body       String      @db.Text
  mood       Int?        @db.TinyInt
  visibility Visibility? @default(private)
  created_at DateTime?   @default(now()) @db.DateTime(0)
  updated_at DateTime?   @default(now()) @updatedAt @db.DateTime(0)
  goal       Goal?       @relation(fields: [goal_id], references: [id], onUpdate: NoAction, map: "fk_journal_goal")
  patient    Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_journal_patient")

  @@index([goal_id], map: "fk_journal_goal")
  @@index([patient_id, created_at], map: "idx_journal_patient_created")
  @@map("journal_entries")
}

model Approval {
  id         Int            @id @default(autoincrement())
  status     ApprovalStatus @default(pending)
  note       String?        @db.VarChar(200)
  decided_at DateTime?      @default(now()) @db.DateTime(0)
  created_at DateTime?      @default(now()) @db.DateTime(0)

  @@map("approval")
}

model LabResult {
  id         Int       @id @default(autoincrement())
  patient_id Int
  lab_type   String?   @db.VarChar(100)
  lab_value  Decimal?  @db.Decimal(10, 2)
  unit       String?   @db.VarChar(100)
  source     String?   @db.VarChar(255)
  file_url   String?   @db.VarChar(255)
  decided_at DateTime? @default(now()) @db.DateTime(0)
  created_at DateTime? @default(now()) @db.DateTime(0)
  patient    Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lab_patient")

  @@index([patient_id], map: "idx_lab_patient")
  @@map("lab_result")
}

model Medicine {
  id               Int                  @id @default(autoincrement())
  patient_id       Int
  medicine_name    String?              @db.VarChar(200)
  taken            Boolean?             @default(false)
  taken_at         DateTime?            @default(now()) @db.DateTime(0)
  patient_daily_id Int?
  patientDaily     PatientDailyMetrics? @relation(fields: [patient_daily_id], references: [id], onUpdate: NoAction, map: "fk_medicine_daily")
  patient          Patient              @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_medicine_patient")

  @@index([patient_id], map: "fk_medicine_patient")
  @@index([patient_daily_id], map: "idx_medicine_daily")
  @@map("medicine")
}

model SymptomLog {
  id               Int                  @id @default(autoincrement())
  patient_id       Int
  symptoms         String?              @db.VarChar(200)
  severity         Int?
  created_at       DateTime?            @default(now()) @db.DateTime(0)
  patient_daily_id Int?
  patientDaily     PatientDailyMetrics? @relation(fields: [patient_daily_id], references: [id], onUpdate: NoAction, map: "fk_symptom_daily")
  patient          Patient              @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_symptom_patient")

  @@index([patient_daily_id], map: "idx_symptom_daily")
  @@index([patient_id, created_at], map: "idx_symptom_patient_created")
  @@map("symptom_log")
}

model Meal {
  id               Int                  @id @default(autoincrement())
  patient_id       Int
  foodname         String?              @db.VarChar(200)
  profile_image    String?              @db.VarChar(255)
  description      String?              @db.Text
  created_at       DateTime?            @default(now()) @db.DateTime(0)
  patient_daily_id Int?
  patientDaily     PatientDailyMetrics? @relation(fields: [patient_daily_id], references: [id], onUpdate: NoAction, map: "fk_meal_daily")
  patient          Patient              @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_meal_patient")

  @@index([patient_daily_id], map: "idx_meal_daily")
  @@index([patient_id, created_at], map: "idx_meal_patient_created")
  @@map("meal")
}

model AiSuggestion {
  id                  Int       @id @default(autoincrement())
  patient_id          Int
  goal_id             Int?
  suggested_delta_pct Decimal?  @db.Decimal(6, 2)
  confidence          Decimal?  @db.Decimal(5, 2)
  requires_approval   Boolean?  @default(false)
  created_at          DateTime? @default(now()) @db.DateTime(0)
  goal                Goal?     @relation(fields: [goal_id], references: [id], onUpdate: NoAction, map: "fk_ai_goal")
  patient             Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ai_patient")

  @@index([goal_id], map: "fk_ai_goal")
  @@index([patient_id], map: "fk_ai_patient")
  @@map("ai_suggestion")
}

model AuditLog {
  id            String    @id @db.Char(36)
  actor_user_id Int
  actiontype    String    @db.VarChar(255)
  entity        String    @db.VarChar(255)
  entity_id     String    @db.Char(36)
  diff          Json?
  created_at    DateTime? @default(now()) @db.DateTime(0)

  actor         User      @relation("AuditActor", fields: [actor_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_actor")

  @@index([actor_user_id], map: "idx_audit_actor")
  @@index([created_at], map: "idx_audit_created")
  @@index([entity, entity_id], map: "idx_audit_entity")
  @@map("audit_log")
}

model PatientDailyMetrics {
  id          Int            @id @default(autoincrement())
  patient_id  Int
  day_date    DateTime       @db.Date
  sleep_hours Decimal?       @db.Decimal(4, 2)
  notes       String?        @db.Text
  created_at  DateTime?      @default(now()) @db.DateTime(0)
  updated_at  DateTime?      @default(now()) @updatedAt @db.DateTime(0)

  progress    GoalProgress[]
  meals       Meal[]
  medicines   Medicine[]
  symptoms    SymptomLog[]

  patient     Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pdm_patient")

  @@unique([patient_id, day_date], name: "uq_pdm_patient_day", map: "uq_pdm_patient_day")
  @@index([patient_id, day_date], map: "idx_pdm_patient_day")
  @@map("patient_daily_metrics")
}

model GoalProgress {
  id               Int                 @id @default(autoincrement())
  goal_id          Int
  patient_daily_id Int
  value_decimal    Decimal?            @db.Decimal(10, 2)
  value_bool       Boolean?
  notes            String?             @db.VarChar(255)
  created_at       DateTime?           @default(now()) @db.DateTime(0)

  patientDaily     PatientDailyMetrics @relation(fields: [patient_daily_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gp_daily")
  goal             Goal                @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_gp_goal")

  @@unique([goal_id, patient_daily_id], name: "uq_gp_goal_day", map: "uq_gp_goal_day")
  @@index([patient_daily_id], map: "idx_gp_daily")
  @@index([goal_id], map: "idx_gp_goal")
  @@map("goal_progress")
}

enum Role {
  patient
  physician
  caretaker
  admin
}

enum BloodType {
  A_pos  @map("A+")
  A_neg  @map("A-")
  B_pos  @map("B+")
  B_neg  @map("B-")
  AB_pos @map("AB+")
  AB_neg @map("AB-")
  O_pos  @map("O+")
  O_neg  @map("O-")
}

enum Gender {
  male
  female
  other
  prefer_not_say
}

enum GoalStatus {
  active
  paused
  completed
  cancelled
}

enum Visibility {
  private
  care_team
}

enum ApprovalStatus {
  pending
  approved
  rejected
}
